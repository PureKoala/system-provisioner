---

- name: Configure package manager
  ansible.builtin.include_tasks:
    file: "{{ ansible_facts['distribution'] }}_pm_cfg.yaml"

# Configure pip
- name: Make sure pip directory exist
  ansible.builtin.file:
    path: "~/.config/pip"
    state: directory
- name: Overwrite pip.conf
  ansible.builtin.copy:
    dest: "~/.config/pip/pip.conf"
    force: yes
    content: |
      [global]
      index-url = https://mirrors.aliyun.com/pypi/simple/

- name: Configure git
  ansible.builtin.git_config:
    scope: global
    name: "{{ item.name }}"
    value: "{{ item.value }}"
  loop:
    - name: user.name
      value: "{{ ansible_hostname }}"
    - name: user.emial
      value: LeoJhon.Song@outlook.com
    - name: credential.helper
      value: store


- name: Clone this repo
  ansible.builtin.git:
    repo: https://github.com/LeoJhonSong/system-provisioner
    dest: "{{ source_dir }}"

# Install Clash
- name: Install wget, curl
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop:
    - wget
    - curl
  become: true
- name: Make sure ~/local exist
  ansible.builtin.file:
    path: ~/local/clash
    state: directory
  register: clashdir
- name: Download ShellClash if not installed
  ansible.builtin.get_url:
    url: https://cdn.jsdelivr.net/gh/juewuy/ShellClash@master/install.sh
    dest: /tmp/install.sh
    mode: u+x
  when: clashdir.changed
- name: Install ShellClash if not exist in environment
  ansible.builtin.shell:
    cmd: /tmp/install.sh
    stdin: |
      1
      1
      4
      /home/{{ ansible_user_id }}/local
      1
  when: clashdir.changed
- name: Initial ShellClash
  ansible.builtin.shell:
    cmd: /home/{{ ansible_user_id }}/local/clash/clash.sh
    stdin: |
      2
      1
      1
      2
      0
      1
      2
      1
      https://dler.cloud/subscribe/6n0sdmybH5h6DGwUeo?clash=ss
      1
      1
      1
  environment:
    clashdir: /home/{{ ansible_user_id }}/local/clash
  when: clashdir.changed
  register: out
- name: Froce ShellClash running in background
  ansible.builtin.shell:
    cmd: nohup /home/{{ ansible_user_id }}/local/clash/start.sh start >/dev/null 2>&1 &
  environment:
    clashdir: /home/{{ ansible_user_id }}/local/clash

# Configure zsh, tmux
- name: Copy Wakatime config
  ansible.builtin.copy:
    src: .wakatime.cfg
    dest: ~/
- name: Install dependency for project detection of Wakatime
  ansible.builtin.pip:
    name: wakatime
- name: Copy python prompt config
  ansible.builtin.copy:
    src: .pythonrc.py
    dest: ~/
- name: Install zsh, tmux
  ansible.builtin.package:
    name:
      - zsh
      - tmux
    state: present
  become: true
- name: Copy zsh local config  # TODO: complete it
  ansible.builtin.copy:
    src: zsh/default.local.zsh
    dest: ~/.zshrc
- name: Install antigen
  ansible.builtin.get_url:
    url: https://git.io/antigen
    dest: "{{ source_dir }}/roles/common/files/zsh/antigen.zsh"
    mode: u+x
  environment: "{{ proxy_env }}"
- name: Check if oh-my-zsh is installed
  ansible.builtin.file:
    path: ~/.oh-my-zsh
    state: directory
  check_mode: true
  register: ohmyzsh
- name: Download oh-my-zsh install script if not installed
  ansible.builtin.get_url:
    url: https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh
    dest: /tmp/install.sh
    mode: u+x
  when: ohmyzsh.changed
  environment: "{{ proxy_env }}"
- name: Install oh-my-zsh
  ansible.builtin.shell:
    cmd: /tmp/install.sh --unattended --keep-zshrc
  environment: "{{ proxy_env }}"
  when: ohmyzsh.changed
- name: Install plugins for zsh
  ansible.builtin.shell:
    executable: /usr/bin/zsh
    cmd: source ~/.zshrc
  environment: "{{ proxy_env }}"
- name: Link tmux config
  ansible.builtin.file:
    src: "{{ source_dir }}/roles/common/files/tmux/{{ item }}"
    dest: "~/{{ item }}"
    state: link
  loop:
    - .tmux.conf
    - .tmux.conf.local

# Install pyenv
- name: Check if pyenv installed
  ansible.builtin.file:
    path: ~/.pyenv
    state: directory
  check_mode: true
  register: pyenv
- name: Install pyenv
  ansible.builtin.shell:
    cmd: curl https://pyenv.run | bash
  when: pyenv.changed
  environment: "{{ proxy_env }}"